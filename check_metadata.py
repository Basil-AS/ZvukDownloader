#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞—Ö
"""

import sys
from pathlib import Path

try:
    from mutagen import File
    from mutagen.flac import FLAC
    from mutagen.mp3 import MP3
    METADATA_AVAILABLE = True
except ImportError:
    print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ mutagen –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    METADATA_AVAILABLE = False
    sys.exit(1)

def check_metadata(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ"""
    if not Path(file_path).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {file_path}")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    audio_file = File(file_path)
    if not audio_file:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
        return
    
    print(f"üìÅ –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {audio_file.mime[0] if audio_file.mime else 'Unknown'}")
    print(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {audio_file.info.length:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"üéµ –ë–∏—Ç—Ä–µ–π—Ç: {getattr(audio_file.info, 'bitrate', 'Unknown')} bps")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—É–¥–∏–æ
    if hasattr(audio_file.info, 'channels'):
        channels = audio_file.info.channels
        if channels == 1:
            channel_text = "–ú–æ–Ω–æ"
        elif channels == 2:
            channel_text = "–°—Ç–µ—Ä–µ–æ"
        elif channels > 2:
            channel_text = f"–ú–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω—ã–π ({channels} –∫–∞–Ω–∞–ª–æ–≤)"
        else:
            channel_text = f"{channels} –∫–∞–Ω–∞–ª–æ–≤"
        print(f"üîä –ö–∞–Ω–∞–ª—ã: {channel_text}")
    
    if hasattr(audio_file.info, 'sample_rate'):
        print(f"üìä –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {audio_file.info.sample_rate} Hz")
    
    if hasattr(audio_file.info, 'bits_per_sample'):
        print(f"üéöÔ∏è –ë–∏—Ç–Ω–æ—Å—Ç—å: {audio_file.info.bits_per_sample} –±–∏—Ç")
    
    print()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–≥–∏
    print("üè∑Ô∏è –û–°–ù–û–í–ù–´–ï –¢–ï–ì–ò:")
    tags_to_check = [
        ('TITLE', '–ù–∞–∑–≤–∞–Ω–∏–µ'),
        ('ARTIST', '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'), 
        ('ALBUM', '–ê–ª—å–±–æ–º'),
        ('ALBUMARTIST', '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∞–ª—å–±–æ–º–∞'),
        ('TRACKNUMBER', '–ù–æ–º–µ—Ä —Ç—Ä–µ–∫–∞'),
        ('GENRE', '–ñ–∞–Ω—Ä'),
        ('LYRICS', '–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏')
    ]
    
    for tag_key, tag_name in tags_to_check:
        value = audio_file.get(tag_key)
        if value:
            if tag_key == 'LYRICS':
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞
                lyrics_preview = str(value[0])[:100] + "..." if len(str(value[0])) > 100 else str(value[0])
                print(f"  {tag_name}: {lyrics_preview}")
            else:
                print(f"  {tag_name}: {value[0] if isinstance(value, list) else value}")
        else:
            print(f"  {tag_name}: ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–ª–æ–∂–∫—É
    print("üñºÔ∏è –û–ë–õ–û–ñ–ö–ê:")
    if isinstance(audio_file, FLAC):
        pictures = audio_file.pictures
        if pictures:
            for i, picture in enumerate(pictures):
                print(f"  –û–±–ª–æ–∂–∫–∞ {i+1}: ‚úÖ {picture.mime}, {len(picture.data)} –±–∞–π—Ç")
        else:
            print("  ‚ùå –û–±–ª–æ–∂–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    elif isinstance(audio_file, MP3):
        apic_frames = [frame for frame in audio_file.tags.values() if frame.FrameID == 'APIC']
        if apic_frames:
            for i, apic in enumerate(apic_frames):
                print(f"  –û–±–ª–æ–∂–∫–∞ {i+1}: ‚úÖ {apic.mime}, {len(apic.data)} –±–∞–π—Ç")
        else:
            print("  ‚ùå –û–±–ª–æ–∂–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —Ç–µ–∫—Å—Ç –≤ MP3 (USLT/SYLT)
    if isinstance(audio_file, MP3):
        try:
            uslt_frames = audio_file.tags.getall('USLT') if audio_file.tags else []
            sylt_frames = audio_file.tags.getall('SYLT') if audio_file.tags else []
            print()
            print("üìù –¢–ï–ö–°–¢ (MP3):")
            if uslt_frames:
                preview = uslt_frames[0].text
                if isinstance(preview, list):
                    preview = "\n".join(preview)[:200]
                else:
                    preview = str(preview)[:200]
                print(f"  USLT: ‚úÖ, –¥–ª–∏–Ω–∞ {len(uslt_frames)} —Ñ—Ä–µ–π–º(–æ–≤)")
                print(f"  –ü—Ä–µ–≤—å—é: {preview}...")
            else:
                print("  USLT: ‚ùå –Ω–µ—Ç")
            if sylt_frames:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–∏–Ω—Ö—Ä–æ-—Ç–æ—á–∫–∏
                points_shown = 0
                print(f"  SYLT: ‚úÖ, –¥–ª–∏–Ω–∞ {len(sylt_frames)} —Ñ—Ä–µ–π–º(–æ–≤)")
                for f in sylt_frames:
                    items = getattr(f, 'text', [])
                    if isinstance(items, list) and items:
                        for item in items[:3]:
                            if isinstance(item, (list, tuple)) and len(item) == 2:
                                txt, ms = item
                                print(f"    [{ms} ms] {str(txt)[:80]}")
                                points_shown += 1
                        if points_shown:
                            break
                if points_shown == 0:
                    print("    (–Ω–µ—Ç —Ç–æ—á–µ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞)")
            else:
                print("  SYLT: ‚ùå –Ω–µ—Ç")
        except Exception as e:
            print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ—Ä–µ–π–º–æ–≤: {e}")
    
    print()
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python check_metadata.py <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>")
        sys.exit(1)
    
    file_path = sys.argv[1]
    check_metadata(file_path)
